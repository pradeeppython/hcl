 
 9643036287
1)From the below list, find the unique triplets combination of addition is zero
 
[1,-1,0,2,3,1]
 
a+b+c =0

def f(arr,n):
    f=False
    for i in range(0,n-2):
        for j in range(i+1,n-1):
            for k in range(j+1,n):
                if arr[i]+arr[j]+arr[k]==0:
                    print(arr[i],arr[j],arr[k])
                    f=True
    if f==False:
        print('nf')

arr=[1,-1,0,2,3]
n=len(arr)
f(arr,n)

 
2)We have 2 inputs.
one is list and another is number(target) as below;
ex.
input_list = [3, -2, 0, 2, 2, 1]
larget = 4
We need a function which takes these 2 inputs and return a list
which has all permutaion combinations for elements whose addition is
equal to target number.
 
ex output
[[3, 1], [2, 2], [3, 0, 1], [0, 2, 2], [3, -2, 2, 1],
[3, -2, 2, 1], [3, -2, 0, 2, 1], [3, -2, 0, 2, 1]
]

import itertools

def f(data,target):
    for i in range(1,len(data)+1):
        perm_data_val=list(itertools.combinations(data,i))
        for checking_data_sum in perm_data_val:
            if sum(checking_data_sum) == target:
                print(list(checking_data_sum))

f([3,-2,0,2,2,1],4)
 
 
3)Given a string "needlle" and substring "ll", find the first occurrence of "ll" in string, If no occurrences return -1
script should satisfy the following conditions:
   If substr is NULL it should return -1
   
   If substr is occurring multiple times in string , return the index of first occurrence.
 
def f(word,target):
   if len(word)==0 or target=='' or len(target)==0:
       retrun -1

   else:
       return word.find(target)

print(f("needlle",''))
print(f("madaam",'aa'))
print(f("needlle",'ee'))

4)Balanced bracketing
# Python3 code to Check for  
# balanced parentheses in an expression 
open_list = ["[","{","("] 
close_list = ["]","}",")"] 
  
# Function to check parentheses 
def check(myStr): 
    stack = [] 
    for i in myStr: 
        if i in open_list: 
            stack.append(i) 
        elif i in close_list: 
            pos = close_list.index(i) 
            if ((len(stack) > 0) and
                (open_list[pos] == stack[len(stack)-1])): 
                stack.pop() 
            else: 
                return "Unbalanced"
    if len(stack) == 0: 
        return "Balanced"
  
# Driver code 
string = "{[]{()}}"
print(string,"-", check(string)) 
  
string = "[{}{})(]"
print(string,"-", check(string)) 

5)have a dictionary with some keys and values and pass null string for some of the keys. the dictionary can also have dict of another dict. We need to pop out all the keys with null values
my_dict = {'a': 123, 'b': {'c' :[1, 4, 5, 7], 'k': (1, 3 ,5),
                              },
              'n': {"p": '', 'x': 56, 'find': ''},
              'url': '',
             }
We need to get final dictonay as below:
#output: my_dict = {'a': 123, 'b': {'c' :[1, 4, 5, 7], 'k': (1, 3 ,5),},'n': {'x': 56,}

my_dict={keys:values for keys,values in my_dict.items() if values}
print(my_dict)

for k,v in my_dict.items():
    if type(v)==dict:
        for key in list(my_dict[k]):
            if my_dict[k][key]=='':
                del my_dict[k][key]

print(my_dict)
 

6)String Compression and comparison:  Given a string please find the no of repeated characters and show it in count: aaaaaabbbb  ….o/p : a6b4…
def f(s):
    count=1
    out=''
    for i in range(len(s)):
        if i<len(s)-1 and s[i]==s[i+1]:
            count=count+1
        else:
            out=out+s[i]+str(count)
            count=1
    print(out)
f('aaaaabbcccdddddddddd')  

7)Find all the subsets of a given set.
 
Input:
S = {1, 2, 3, 4}
 
Output:
[1] , [2], [3], [4],
[1,2], [1,3],[1,4], [2,3], [2,4], [3,4],
[1,2,3], [1,2,4], [1,3,4], [2,3,4], [1,2,3,4]
 
8)Find the sum of consequences no. if the sum matches the target, get the index of that element
Input : [1, 5, 4, 9]  , 5
 
 
9) Count triplets with sum smaller than a given value
Given an array of distinct integers and a sum value. Find count of triplets with sum smaller than given sum value. Expected Time Complexity is O(n2).
 
Examples:
 
Input : arr[] = {-2, 0, 1, 3}
        sum = 2.
Output : 2
Explanation :  Below are triplets with sum less than 2
               (-2, 0, 1) and (-2, 0, 3)
 
Input : arr[] = {5, 1, 3, 4, 7}
        sum = 12.
Output : 4
Explanation :  Below are triplets with sum less than 4
               (1, 3, 4), (1, 3, 5), (1, 3, 7) and
               (1, 4, 5)
 
10)Reverse an array without affecting special characters
Given a string, that contains special character together with alphabets (‘a’ to ‘z’ and ‘A’ to ‘Z’), reverse the string in a way that special characters are not affected.
 
Examples:
 
Input:   str = "a,b$c"
Output:  str = "c,b$a"
Note that $ and , are not moved anywhere. 
Only subsequence "abc" is reversed
 
Input:   str = "Ab,c,de!$"
Output:  str = "ed,c,bA!$"
 
 
11)You are given a two lists  and . Your task is to compute their cartesian product X.
 
Example
 
A = [1, 2],
B = [3, 4]
 
Output:
 
AxB = [(1, 3), (1, 4), (2, 3), (2, 4)]
 
 
 
12)You are given a string .
Your task is to print all possible permutations of size  of the string in lexicographic sorted order.
 
Input Format
 
A single line containing the space separated string  and the integer value .
 
print all
>> print list(permutations(['1','2','3']))
[('1', '2', '3'), ('1', '3', '2'), ('2', '1', '3'), ('2', '3', '1'), ('3', '1', '2'), ('3', '2', '1')]
>>>
>>> print list(permutations(['1','2','3'],2))
[('1', '2'), ('1', '3'), ('2', '1'), ('2', '3'), ('3', '1'), ('3', '2')]
>>> 
>>> print list(permutations('abc',3))
[('a', 'b', 'c'), ('a', 'c', 'b'), ('b', 'a', 'c'), ('b', 'c', 'a'), ('c', 'a', 'b'), ('c', 'b', 'a')]

13.return duplicate elements from a list
   ex:[10,20,10,30,30,45,67]
  output[10,20,30]
14.find maximum sal from an employee record
    employee records have field :name,age,location and sal